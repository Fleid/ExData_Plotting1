install.packages("swirl")
> library("swirl")
library("swirl")
library(swirl)
swirl()
my_vector <- as.vector(1:20)
info()
?as
my_vector
my_vector <- 1:20
my_vector
dim(my_vector)
legnth(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vecotr
my_vector
class(my_vector)
my_matrix <- my_vector
install.packages("rpostgresql")
install.packages("rmysql")
install.packages("rmysql")
install.packages("rmysql", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
library(RMySQL)
install.packages("RPostgreSQL")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
install.packages("RCurl")
install.packages("RJSONIO")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
library("RCurl")
library("RJSONIO")
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "3",
"Superficie m2"= "60",
"Arrondissement"= "Paris 15e"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
GlobalParameters=
;
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"SuperficieM2"= "0",
"PrixEuro"= "0",
"Arrondissement"= "0",
"CodePostal"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "i+298tmkI7OfaRVNQUIqig4NVKN+LXfB9E7BZZd9EaKTR3xIa/Nj5W6Hx44ZQWrPI6RcoSw95Pdv1ip3bABBqw==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/7b1ad4d3b7da48b49339c184d5e12d7e/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
setwd("~/Documents/GitHub/ExData_Plotting1")
source('~/Documents/GitHub/ExData_Plotting1/plot1.R')
hist(t$Global_active_power, col="red")
t$Global_active_power <- as.Num(t$Global_active_power)
t$Global_active_power <- as.Numeric(t$Global_active_power)
?as
t$Global_active_power <- as.numeric(t$Global_active_power)
head(t,5)
head(fullset,5)
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))
t$Date <- strptime(t$Date,"%d/%m/%Y")
head(t,5)
t$Global_active_power2 <- as.numeric(t$Global_active_power)
head(t)
t$Global_active_power2 <- as.double(t$Global_active_power)
head(t)
t$Global_active_power2 <- as.double(as.text(t$Global_active_power))
t$Global_active_power
t$Global_active_power[]
t$Global_active_power[[]]
t$Global_active_power[]
as.numeric(t$Global_active_power[])
head(t,1)
head(t$Global_active_power,1)
head(t$Global_active_power[1],1)
head(t$Date,1)
head(t$Global_active_power[[]],1)
head(t$Global_active_power[0],1)
head(t$Global_active_power[],1)
t$Global_active_power2 <- as.numeric(as.character(t$Global_active_power))
head(t,2)
t$Voltage <- as.numeric(as.character(t$Voltage))
t$Global_reactive_power <- as.numeric(as.character(t$Global_reactive_power))
t$Sub_metering_1 <- as.numeric(as.character(t$Sub_metering_1))
t$Sub_metering_1 <- as.numeric(as.character(t$Sub_metering_1))
t$Sub_metering_2 <- as.numeric(as.character(t$Sub_metering_2))
t$Sub_metering_3 <- as.numeric(as.character(t$Sub_metering_3))
head(t,100)
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))`
;
aaa
azs
quit
;
''
`
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))
t$Global_reactive_power2 <- as.numeric(as.character(t$Global_reactive_power))
subset(t,t$Global_active_power=="?")
View(t)
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))
t$Date <- strptime(t$Date,"%d/%m/%Y")
t$Global_active_power <- as.numeric(as.character(t$Global_active_power))
t$Voltage <- as.numeric(as.character(t$Voltage))
t$Global_reactive_power <- as.numeric(as.character(t$Global_reactive_power))
t$Sub_metering_1 <- as.numeric(as.character(t$Sub_metering_1))
t$Sub_metering_2 <- as.numeric(as.character(t$Sub_metering_2))
t$Sub_metering_3 <- as.numeric(as.character(t$Sub_metering_3))
?hist
hist(t$Global_active_power,col="red")
title("Global Active Power")
?hist
title("Global Active Power",main="Global Active Power",xlab="Global Active Power (kilowatts)")
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
?dev.copy
dev.print(width = 480, height = 480)
?hist
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)",width = 480, height = 480)
dev.copy(png,file="Plot1.png")
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.print(width = 480, height = 480)
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
?devices
Devices?
;
?Devices
dev.cur()
dev.off()
dev.off()
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.copy(png,file="Plot1.png")
png("Plot1.png",width= 480, height = 480,  units= "px")
dev.copy(png)
dev.off()
dev.off()
dev.off()
dev.off()
png("Plot1.png",width= 480, height = 480,  units= "px")
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.copy(png)
dev.off()
dev.off()
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
t$Day <- weekdays(t$Date)
head(t,5)
?weekday
?weekdays
?strptime
plot(data=t,Day ~ Global_active_power)
plot(x=t$Day,y=t$Global_active_power)
plot(t$Day,y=t$Global_active_power)
plot(t$Day,t$Global_active_power)
?plot
?strptime
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))
# In place data conversions
t$Time <- strptime(paste(t$Date,t$Time,sep = " "), "%d/%m/%Y :%H:%M:%S")
t$Date <- strptime(t$Date,"%d/%m/%Y")
t$Global_active_power <- as.numeric(as.character(t$Global_active_power))
t$Voltage <- as.numeric(as.character(t$Voltage))
t$Global_reactive_power <- as.numeric(as.character(t$Global_reactive_power))
t$Sub_metering_1 <- as.numeric(as.character(t$Sub_metering_1))
t$Sub_metering_2 <- as.numeric(as.character(t$Sub_metering_2))
t$Sub_metering_3 <- as.numeric(as.character(t$Sub_metering_3))
head(t,5)
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))
t$test <- paste(t$Date,t$Time,sep = " ")
head(t,5)
t <- subset(fullset,fullset$Date %in% c("1/2/2007","2/2/2007"))
# In place data conversions
t$Time <- strptime(paste(t$Date,t$Time,sep = " "), "%d/%m/%Y %H:%M:%S")
t$Date <- strptime(t$Date,"%d/%m/%Y")
t$Global_active_power <- as.numeric(as.character(t$Global_active_power))
t$Voltage <- as.numeric(as.character(t$Voltage))
t$Global_reactive_power <- as.numeric(as.character(t$Global_reactive_power))
t$Sub_metering_1 <- as.numeric(as.character(t$Sub_metering_1))
t$Sub_metering_2 <- as.numeric(as.character(t$Sub_metering_2))
t$Sub_metering_3 <- as.numeric(as.character(t$Sub_metering_3))
head(t,5)
plot(x = t$Time, y = t$Global_active_power)
Lines(x = t$Time, y = t$Global_active_power)
lines(x = t$Time, y = t$Global_active_power)
plot(x = t$Time, y = t$Global_active_power)
?plot
plot(x = t$Time, y = t$Global_active_power, type = "l")
?plot
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts")
png("Plot2.png",width= 480, height = 480,  units= "px")
dev.copy(png)
dev.copy(png)
t$Date <- strptime(t$Date,"%d/%m/%Y")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source('~/Documents/GitHub/ExData_Plotting1/plot1.R')
dev.copy(png)
dev.copy()
dev.off()
dev.off()
dev.off()
dev.off()
png("Plot1.png",width= 480, height = 480,  units= "px")
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.copy(png)
dev.off()
dev.off()
png("Plot1.png",width= 480, height = 480,  units= "px")
hist(t$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
png("Plot2.png",width= 480, height = 480,  units= "px")
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts")
dev.off()
png("Plot2.png",width= 480, height = 480,  units= "px")
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
png("Plot3.png",width= 480, height = 480,  units= "px")
plot(x = t$Time, y = t$Sub_metering_1, col ="black" type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Sub_metering_2, col ="red", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
png("Plot3.png",width= 480, height = 480,  units= "px")
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Sub_metering_2, col ="red", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Sub_metering_3, col ="blue", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Global Active Power (kilowatts)")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", type = "l", col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
legend("topright", col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
?legend
legend("topright", lwd = 4, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
dev.off()
png("Plot3.png",width= 480, height = 480,  units= "px")
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Energy sub metering")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
dev.off()
png("Plot4.png",width= 480, height = 480,  units= "px")
par(mfrow = 2, mfcol = 2)
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Voltage, type = "l", xlab="datetime",ylab="Voltage")
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Energy sub metering")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(x = t$Time, y = t$Global_reactive_power, type = "l", xlab="datetime",ylab="Global_Reactive_Power")
dev.off()
par(mfrow = c(2,2))
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Voltage, type = "l", xlab="datetime",ylab="Voltage")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Energy sub metering")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(x = t$Time, y = t$Global_reactive_power, type = "l", xlab="datetime",ylab="Global_Reactive_Power")
dev.off()
png("Plot4.png",width= 480, height = 480,  units= "px")
par(mfrow = 2, mfcol = 2)
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Voltage, type = "l", xlab="datetime",ylab="Voltage")
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Energy sub metering")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(x = t$Time, y = t$Global_reactive_power, type = "l", xlab="datetime",ylab="Global_Reactive_Power")
dev.off()
png("Plot4.png",width= 480, height = 480,  units= "px")
par(mfrow = c(2,2))
plot(x = t$Time, y = t$Global_active_power, type = "l", xlab="",ylab="Global Active Power (kilowatts)")
plot(x = t$Time, y = t$Voltage, type = "l", xlab="datetime",ylab="Voltage")
plot(x = t$Time, y = t$Sub_metering_1, col ="black", type = "l", xlab="",ylab="Energy sub metering")
lines(x = t$Time, y = t$Sub_metering_2, col ="red")
lines(x = t$Time, y = t$Sub_metering_3, col ="blue")
legend("topright", lwd = 1, col = c("black", "red","blue"), legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(x = t$Time, y = t$Global_reactive_power, type = "l", xlab="datetime",ylab="Global_Reactive_Power")
dev.off()
